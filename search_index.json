[["index.html", "Tidy Modeling with R Book Club Welcome", " Tidy Modeling with R Book Club The R4DS Online Learning Community 2021-01-13 Welcome This is a companion for the book Tidy Modeling with R by Max Kuhn and Julia Silge. This companion is available at r4ds.io/tmwr. This website is being developed by the R4DS Online Learning Community. Follow along, and join the community to participate. This companion follows the R4DS Online Learning Community Code of Conduct. "],["book-club-meetings.html", "Book club meetings", " Book club meetings Each week, a volunteer will present a chapter from the book. This is the best way to learn the material. Presentations will usually consist of a review of the material, a discussion, and/or a demonstration of the principles presented in that chapter. More information about how to present is available in the github repo. Presentations will be recorded, and will be available on the R4DS Online Learning Community YouTube Channel. "],["software-for-modeling.html", "Chapter 1 Software for modeling", " Chapter 1 Software for modeling Learning objectives: Recognize the principles around which the {tidymodels} packages were designed. Classify models as descriptive, inferential, and/or predictive. Define descriptive model. Define inferential model. Define predictive model. Differentiate between supervised and unsupervised models. Differentiate between regression and classification models. Differentiate between quantitative and qualitative data. Understand the roles that data can have in an analysis. Apply the data science process. Recognize the phases of modeling. "],["the-pit-of-success.html", "1.1 The pit of success", " 1.1 The pit of success {tidymodels} aims to help us fall into the Pit of Success: The Pit of Success: in stark contrast to a summit, a peak, or a journey across a desert to find victory through many trials and surprises, we want our customers to simply fall into winning practices by using our platform and frameworks. Avoid confusion: Software should facilitate proper usage. Avoid mistakes: Software should make it easy for users to do the right thing. "],["types-of-models.html", "1.2 Types of models", " 1.2 Types of models Descriptive models: Describe or illustrate characteristics of data. Inferential models: Make some statement of truth regarding a predefined conjecture or idea. Usually delayed feedback between inference and actual result. Predictive models: Produce the most accurate possible prediction for new data. Estimation (“How much?”) rather than inference (“Will it?”). Mechanistic models are derived using first principles to produce a model equation that is dependent on assumptions. Empirically driven models have more vague assumptions, and are derived directly from the data. "],["terminology.html", "1.3 Terminology", " 1.3 Terminology Unsupervised models learn patterns, clusters, etc, but lack an outcome variable. Examples: PCA, clustering, autoencoders. Supervised models have an outcome variable. Examples: linear regression, neural networks. Regression: numeric outcome Classification: ordered or unordered qualitative values. Quantitative data: numbers. Qualitative (nominal) data: non-numbers. Data can have different roles in analyses: Outcomes (labels, endpoints, dependent variables): the value being predicted in supervised models. Predictors (independent variables): the variables used to predict the outcome. "],["the-data-analysis-process.html", "1.4 The data analysis process", " 1.4 The data analysis process The data science process (from R for Data Science by Wickham and Grolemund. "],["the-modeling-process.html", "1.5 The modeling process", " 1.5 The modeling process The modeling process. Exploratory data analysis: Explore the data to see what they might tell you. Don’t underestimate the time you’ll need for cleaning the data. It’s the step that the ’verse is named after! Take time to understand the data. Develop clear expectations of the goal of your model and how performance will be judged (Chapter 9). Feature engineering: Create specific model terms. Covered in Chapter 6. Model tuning and selection: Generate a variety of models and compare performance. Model evaluation: Use EDA-like analyses to choose the best model for your situation. "],["a-tidyverse-primer.html", "Chapter 2 A tidyverse primer", " Chapter 2 A tidyverse primer Learning objectives: List the tidyverse design principles. Explain what it means for the tidyverse to be designed for humans. Describe how reusing existing data structures can make functions easier to work with. Explain what it means for a set of functions to be designed for the pipe. Explain what it means for function to be designed for functional programming. List some differences between a tibble and a base data.frame. Recognize how to use the tidyverse to read and wrangle data. "],["tidyverse-design-principles.html", "2.1 Tidyverse design Principles", " 2.1 Tidyverse design Principles The tidyverse has four core design principles: Human centered: Designed to promote human usability. Consistent: Learning how to use one function or package is as similar as another. Composable: Easily breakdown data challenges into smaller components with exploratory tools to find the best solution. Inclusive: Fostering a community of like-minded users (e.g. #rstats) "],["design-for-humans.html", "2.2 Design for Humans", " 2.2 Design for Humans “Programs must be written for people to read, and only incidentally for machines to execute.” - Hal Abelson The tidyverse offers packages that are easily readable and understood by humans. It enables them to more easily achieve their programming goals. Consider the mtcars dataset, which comprises fuel consumption and 10 aspects of autombile design and performance from 1973-1974. Previewing the first six rows of the data, we see: ## mpg cyl disp hp drat wt qsec vs am gear carb ## Mazda RX4 21.0 6 160 110 3.90 2.620 16.46 0 1 4 4 ## Mazda RX4 Wag 21.0 6 160 110 3.90 2.875 17.02 0 1 4 4 ## Datsun 710 22.8 4 108 93 3.85 2.320 18.61 1 1 4 1 ## Hornet 4 Drive 21.4 6 258 110 3.08 3.215 19.44 1 0 3 1 ## Hornet Sportabout 18.7 8 360 175 3.15 3.440 17.02 0 0 3 2 ## Valiant 18.1 6 225 105 2.76 3.460 20.22 1 0 3 1 If we wanted to arrange these in ascending order based on the mpg and gear variables, how could we do this? The function arrange(), in the dplyr package of the tidyverse, takes a data frame and column names as such: arrange(.data = mtcars, gear, mpg) arrange(), and other tidyverse functions, use names that are descriptive and explicit. For general methods, there is a focus on verbs, as seen with the functions pivot_longer() and pivot_wider() in the tidyr package. "],["reusing-existing-data-structures.html", "2.3 Reusing existing data structures", " 2.3 Reusing existing data structures “You don’t have to reinvent the wheel, just attach it to a new wagon.” - Mark McCormack There are many different data types in R, such as matrices, lists, and data frames.1 A typical function would take in data of some form, conduct an operation, and return the result. tidyverse functions most often operate on data structures called tibbles. Traditional data frames can represent different data types in each column, and multiple values in each row. Tibbles are a special data frame that have additional properties helpful for data analysis. Example: list-columns boot_samp &lt;- rsample::bootstraps(mtcars, times = 3) boot_samp ## # Bootstrap sampling ## [90m# A tibble: 3 x 2[39m ## splits id ## [3m[90m&lt;list&gt;[39m[23m [3m[90m&lt;chr&gt;[39m[23m ## [90m1[39m [90m&lt;split [32/13]&gt;[39m Bootstrap1 ## [90m2[39m [90m&lt;split [32/12]&gt;[39m Bootstrap2 ## [90m3[39m [90m&lt;split [32/12]&gt;[39m Bootstrap3 class(boot_samp) ## [1] &quot;bootstraps&quot; &quot;rset&quot; &quot;tbl_df&quot; &quot;tbl&quot; &quot;data.frame&quot; The above example shows how to create bootstrap resamples of the data frame mtcars. It returns a tibble with a splits column that defines the resampled data sets. This function inherits data frame and tibble methods so other functions that operate on those data structures can be used. For a more detailed discussion, see Hadley Wickham’s Advanced R↩︎ "],["designed-for-the-pipe.html", "2.4 Designed for the pipe", " 2.4 Designed for the pipe The pipe operator, %&gt;%, comes from the magrittr package by Stefan Milton Bache, and is used to chain together a sequence of R functions. More specifically, the pipe operator uses the value of the object on the left-hand side of the operator as the first argument on the operator’s right-hand side. The pipe allows for highly readable code. Consider wanting to sort the mtcars dataset by the number of gears (gear) and then select the first ten rows. How would you do that? cars_arranged &lt;- arrange(mtcars, gear) cars_selected &lt;- slice(cars_arranged, 1:10) # more compactly cars_selected &lt;- slice(arrange(mtcars, gear), 1:10) Using the pipe to substitute the left-hand side of the operator with the first argument on the right-hand side, we can get the same result as follows: cars_selected &lt;- mtcars %&gt;% arrange(gear) %&gt;% slice(1:10) This approach with the pipe works because all the functions return the same data structure (a tibble/data frame) which is the first argument of the next function. Whenever possible, create functions that can be incorporated into a pipeline of operations. "],["designed-for-functional-programming.html", "2.5 Designed for Functional Programming", " 2.5 Designed for Functional Programming Functional Programming is an approach to replace iterative (i.e. for) loops. Consider the case where you may want two times the square root of the mpg for each car in mtcars. You could do this with a for loop as follows: n &lt;- nrow(mtcars) roots &lt;- rep(NA_real_, n) for (car in 1:n) { roots[car] &lt;- 2 * sqrt(mtcars$mpg[car]) } You could also write a function to do the computations. In functional programming, it’s important that the function does not have any side effects and the output only depends on the inputs. For example, the function my_sqrt() takes in a car’s mpg and a weight by which to multiply the square root. my_sqrt &lt;- function(mpg, weight) { weight * sqrt(mpg) } Using the purrr package, we can forgo the for loop and use the map() family of functions which use the basic syntax of map(vector, function). Below, we are applying the my_sqrt() function, with a weight of 2, to the first three elements of mtcars$mpg. User supplied functions can be declared by prefacing it with ~ (pronounced “twiddle”). By default, map() returns a list. If you know the class of a function’s output, you can use special suffixes. A character output, for example, would used by map_chr(), a double by map_dbl(), and a logical by map_lgl(). map( .x = head(mtcars$mpg, 3), ~ my_sqrt( mpg = .x, weight = 2 ) ) ## [[1]] ## [1] 9.165151 ## ## [[2]] ## [1] 9.165151 ## ## [[3]] ## [1] 9.549869 map() functions can be used with 2 inputs, by specifying map2() Requires arguments .x and .y map2( .x = head(mtcars$mpg, 3), .y = c(1,2,3), ~ my_sqrt( mpg = .x, weight = .y ) ) ## [[1]] ## [1] 4.582576 ## ## [[2]] ## [1] 9.165151 ## ## [[3]] ## [1] 14.3248 "],["tibbles-vs-data-frames.html", "2.6 Tibbles vs. Data Frames", " 2.6 Tibbles vs. Data Frames A tibble is a special type of data frame with some additional properties. Specifically: Tibbles work with column names that are not syntactically valid variable names. data.frame(`this does not work` = 1:2, oops = 3:4) ## this.does.not.work oops ## 1 1 3 ## 2 2 4 tibble(`this does work, though` = 1:2, `woohoo!` = 3:4) ## [90m# A tibble: 2 x 2[39m ## `this does work, though` `woohoo!` ## [3m[90m&lt;int&gt;[39m[23m [3m[90m&lt;int&gt;[39m[23m ## [90m1[39m 1 3 ## [90m2[39m 2 4 Tibbles prevent partial matching of arguments to avoid accidental errors df &lt;- data.frame(partial = 1:5) tbbl &lt;- tibble(partial = 1:5) df$part ## [1] 1 2 3 4 5 tbbl$part ## Warning: Unknown or uninitialised column: `part`. ## NULL Tibbles prevent dimension dropping, so subsetting data into a single column will never return a vector. df[, &quot;partial&quot;] ## [1] 1 2 3 4 5 tbbl[, &quot;partial&quot;] ## [90m# A tibble: 5 x 1[39m ## partial ## [3m[90m&lt;int&gt;[39m[23m ## [90m1[39m 1 ## [90m2[39m 2 ## [90m3[39m 3 ## [90m4[39m 4 ## [90m5[39m 5 Tibbles allow for list-columns, which can be a powerful tool when working with the purrr package. template_list &lt;- list(a = 1, b = 2, c = 3, d = 4, e = 5) data.frame(col = 1:5, list_col = template_list) ## col list_col.a list_col.b list_col.c list_col.d list_col.e ## 1 1 1 2 3 4 5 ## 2 2 1 2 3 4 5 ## 3 3 1 2 3 4 5 ## 4 4 1 2 3 4 5 ## 5 5 1 2 3 4 5 tibble(col = 1:5, list_col = template_list) ## [90m# A tibble: 5 x 2[39m ## col list_col ## [3m[90m&lt;int&gt;[39m[23m [3m[90m&lt;named list&gt;[39m[23m ## [90m1[39m 1 [90m&lt;dbl [1]&gt;[39m ## [90m2[39m 2 [90m&lt;dbl [1]&gt;[39m ## [90m3[39m 3 [90m&lt;dbl [1]&gt;[39m ## [90m4[39m 4 [90m&lt;dbl [1]&gt;[39m ## [90m5[39m 5 [90m&lt;dbl [1]&gt;[39m "],["how-to-read-and-wrangle-data.html", "2.7 How to read and wrangle data", " 2.7 How to read and wrangle data The following example shows how to use the tidyverse to read in data (with the readr package) and easily manipulate it (using the dplyr and lubridate packages). We will walk through these steps during our meeting. library(tidyverse) library(lubridate) url &lt;- &quot;http://bit.ly/raw-train-data-csv&quot; all_stations &lt;- # Step 1: Read in the data. readr::read_csv(url) %&gt;% # Step 2: filter columns and rename stationname dplyr::select(station = stationname, date, rides) %&gt;% # Step 3: Convert the character date field to a date encoding. # Also, put the data in units of 1K rides dplyr::mutate(date = lubridate::mdy(date), rides = rides / 1000) %&gt;% # Step 4: Summarize the multiple records using the maximum. dplyr::group_by(date, station) %&gt;% dplyr::summarize(rides = max(rides), .groups = &quot;drop&quot;) head(all_stations, 10) ## [90m# A tibble: 10 x 3[39m ## date station rides ## [3m[90m&lt;date&gt;[39m[23m [3m[90m&lt;chr&gt;[39m[23m [3m[90m&lt;dbl&gt;[39m[23m ## [90m 1[39m 2001-01-01 18th 0 ## [90m 2[39m 2001-01-01 35-Bronzeville-IIT 0.448 ## [90m 3[39m 2001-01-01 35th/Archer 0.318 ## [90m 4[39m 2001-01-01 43rd 0.211 ## [90m 5[39m 2001-01-01 47th-Dan Ryan 0.787 ## [90m 6[39m 2001-01-01 47th-South Elevated 0.427 ## [90m 7[39m 2001-01-01 51st 0.364 ## [90m 8[39m 2001-01-01 54th/Cermak 0 ## [90m 9[39m 2001-01-01 63rd-Dan Ryan 1.37 ## [90m10[39m 2001-01-01 69th 2.37 “This pipeline of operations illustrates why the tidyverse is popular. A series of data manipulations is used that have simple and easy to understand user interfaces; the series is bundled together in a streamlined and readable way. The focus is on how the user interacts with the software. This approach enables more people to learn R and achieve their analysis goals, and adopting these same principles for modeling in R has the same benefits.” - Max Kuhn and Julia Silge in Tidy Modeling with R "],["a-review-of-r-modeling-fundamentals.html", "Chapter 3 A review of R modeling fundamentals", " Chapter 3 A review of R modeling fundamentals Learning objectives: Jon will prefill these. "],["slide-1-title.html", "3.1 Slide 1 Title", " 3.1 Slide 1 Title Put the content of your slide here. "],["slide-2-title.html", "3.2 Slide 2 Title", " 3.2 Slide 2 Title Put the content of your second slide here. "],["the-ames-housing-data.html", "Chapter 4 The Ames housing data", " Chapter 4 The Ames housing data Learning objectives: Jon will prefill these. "],["slide-1-title-1.html", "4.1 Slide 1 Title", " 4.1 Slide 1 Title Put the content of your slide here. "],["slide-2-title-1.html", "4.2 Slide 2 Title", " 4.2 Slide 2 Title Put the content of your second slide here. "],["spending-our-data.html", "Chapter 5 Spending our data", " Chapter 5 Spending our data Learning objectives: Jon will prefill these. "],["slide-1-title-2.html", "5.1 Slide 1 Title", " 5.1 Slide 1 Title Put the content of your slide here. "],["slide-2-title-2.html", "5.2 Slide 2 Title", " 5.2 Slide 2 Title Put the content of your second slide here. "],["feature-engineering-with-recipes.html", "Chapter 6 Feature engineering with recipes", " Chapter 6 Feature engineering with recipes Learning objectives: Jon will prefill these. "],["slide-1-title-3.html", "6.1 Slide 1 Title", " 6.1 Slide 1 Title Put the content of your slide here. "],["slide-2-title-3.html", "6.2 Slide 2 Title", " 6.2 Slide 2 Title Put the content of your second slide here. "],["fitting-models-with-parsnip.html", "Chapter 7 Fitting models with parsnip", " Chapter 7 Fitting models with parsnip Learning objectives: Jon will prefill these. "],["slide-1-title-4.html", "7.1 Slide 1 Title", " 7.1 Slide 1 Title Put the content of your slide here. "],["slide-2-title-4.html", "7.2 Slide 2 Title", " 7.2 Slide 2 Title Put the content of your second slide here. "],["a-model-workflow.html", "Chapter 8 A model workflow", " Chapter 8 A model workflow Learning objectives: Jon will prefill these. "],["slide-1-title-5.html", "8.1 Slide 1 Title", " 8.1 Slide 1 Title Put the content of your slide here. "],["slide-2-title-5.html", "8.2 Slide 2 Title", " 8.2 Slide 2 Title Put the content of your second slide here. "],["judging-model-effectiveness.html", "Chapter 9 Judging model effectiveness", " Chapter 9 Judging model effectiveness Learning objectives: Jon will prefill these. "],["slide-1-title-6.html", "9.1 Slide 1 Title", " 9.1 Slide 1 Title Put the content of your slide here. "],["slide-2-title-6.html", "9.2 Slide 2 Title", " 9.2 Slide 2 Title Put the content of your second slide here. "],["review-of-chapters-4-9.html", "Review of chapters 4-9", " Review of chapters 4-9 Learning objectives: Jon will prefill these. "],["slide-1-title-7.html", "9.3 Slide 1 Title", " 9.3 Slide 1 Title Put the content of your slide here. "],["slide-2-title-7.html", "9.4 Slide 2 Title", " 9.4 Slide 2 Title Put the content of your second slide here. "],["resampling-for-evaluating-performance.html", "Chapter 10 Resampling for evaluating performance", " Chapter 10 Resampling for evaluating performance Learning objectives: Jon will prefill these. "],["slide-1-title-8.html", "10.1 Slide 1 Title", " 10.1 Slide 1 Title Put the content of your slide here. "],["slide-2-title-8.html", "10.2 Slide 2 Title", " 10.2 Slide 2 Title Put the content of your second slide here. "],["comparing-models-with-resampling.html", "Chapter 11 Comparing models with resampling", " Chapter 11 Comparing models with resampling Learning objectives: Jon will prefill these. "],["slide-1-title-9.html", "11.1 Slide 1 Title", " 11.1 Slide 1 Title Put the content of your slide here. "],["slide-2-title-9.html", "11.2 Slide 2 Title", " 11.2 Slide 2 Title Put the content of your second slide here. "],["model-tuning-and-the-dangers-of-overfitting.html", "Chapter 12 Model tuning and the dangers of overfitting", " Chapter 12 Model tuning and the dangers of overfitting Learning objectives: Jon will prefill these. "],["slide-1-title-10.html", "12.1 Slide 1 Title", " 12.1 Slide 1 Title Put the content of your slide here. "],["slide-2-title-10.html", "12.2 Slide 2 Title", " 12.2 Slide 2 Title Put the content of your second slide here. "],["grid-search.html", "Chapter 13 Grid search", " Chapter 13 Grid search Learning objectives: Jon will prefill these. "],["slide-1-title-11.html", "13.1 Slide 1 Title", " 13.1 Slide 1 Title Put the content of your slide here. "],["slide-2-title-11.html", "13.2 Slide 2 Title", " 13.2 Slide 2 Title Put the content of your second slide here. "],["iterative-search.html", "Chapter 14 Iterative search", " Chapter 14 Iterative search Learning objectives: Jon will prefill these. "],["slide-1-title-12.html", "14.1 Slide 1 Title", " 14.1 Slide 1 Title Put the content of your slide here. "],["slide-2-title-12.html", "14.2 Slide 2 Title", " 14.2 Slide 2 Title Put the content of your second slide here. "],["review-of-chapters-10-14.html", "Review of chapters 10-14", " Review of chapters 10-14 Learning objectives: Jon will prefill these. "],["slide-1-title-13.html", "14.3 Slide 1 Title", " 14.3 Slide 1 Title Put the content of your slide here. "],["slide-2-title-13.html", "14.4 Slide 2 Title", " 14.4 Slide 2 Title Put the content of your second slide here. "]]
